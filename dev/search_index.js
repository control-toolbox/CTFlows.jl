var documenterSearchIndex = {"docs":
[{"location":"api.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"CurrentModule = CTFlows ","category":"page"},{"location":"api.html","page":"API","title":"API","text":"Modules = [CTFlows]\nOrder = [:module, :type, :function, :macro]\nPrivate = false","category":"page"},{"location":"api.html","page":"API","title":"API","text":"","category":"page"},{"location":"dev-api.html#Internal-functions","page":"Developers","title":"Internal functions","text":"","category":"section"},{"location":"dev-api.html","page":"Developers","title":"Developers","text":"CurrentModule = CTFlows ","category":"page"},{"location":"dev-api.html","page":"Developers","title":"Developers","text":"Modules = [CTFlows]\nOrder = [:module, :type, :function, :macro]\nPublic = false","category":"page"},{"location":"dev-api.html#CTBase.OptimalControlSolution-Tuple{CTFlows.OptimalControlFlowSolution}","page":"Developers","title":"CTBase.OptimalControlSolution","text":"OptimalControlSolution(\n    ocfs::CTFlows.OptimalControlFlowSolution\n) -> CTBase.OptimalControlSolution\n\n\nConstruct an OptimalControlSolution from an OptimalControlFlowSolution.\n\n\n\n\n\n","category":"method"},{"location":"dev-api.html#CTFlows.ExtensionError","page":"Developers","title":"CTFlows.ExtensionError","text":"struct ExtensionError <: CTBase.CTException\n\nException thrown when an extension is not loaded but the user tries to call a function of it.\n\nFields\n\nvar::String\n\n\n\n\n\n","category":"type"},{"location":"dev-api.html#CTFlows.OptimalControlFlowSolution","page":"Developers","title":"CTFlows.OptimalControlFlowSolution","text":"struct OptimalControlFlowSolution\n\nType of an optimal control flow solution.\n\nFields\n\node_sol::Any\nfeedback_control::CTBase.ControlLaw\nocp::CTBase.OptimalControlModel\nvariable::Union{Real, AbstractVector{<:Real}}\n\n\n\n\n\n","category":"type"},{"location":"dev-api.html#Base.showerror-Tuple{IO, CTFlows.ExtensionError}","page":"Developers","title":"Base.showerror","text":"showerror(io::IO, e::CTFlows.ExtensionError)\n\n\nPrint the exception.\n\n\n\n\n\n","category":"method"},{"location":"dev-api.html#CTFlows.__abstol-Tuple{}","page":"Developers","title":"CTFlows.__abstol","text":"__abstol() -> Float64\n\n\nDefault absolute tolerance for ODE solvers.\n\nSee abstol from DifferentialEquations.\n\n\n\n\n\n","category":"method"},{"location":"dev-api.html#CTFlows.__alg-Tuple{}","page":"Developers","title":"CTFlows.__alg","text":"__alg() -> Any\n\n\nDefault algorithm for ODE solvers.\n\nSee alg from DifferentialEquations.\n\n\n\n\n\n","category":"method"},{"location":"dev-api.html#CTFlows.__callback-Tuple{}","page":"Developers","title":"CTFlows.__callback","text":"__callback()\n\n\nSee callback from DifferentialEquations.\n\n\n\n\n\n","category":"method"},{"location":"dev-api.html#CTFlows.__reltol-Tuple{}","page":"Developers","title":"CTFlows.__reltol","text":"__reltol() -> Float64\n\n\nDefault relative tolerance for ODE solvers.\n\nSee reltol from DifferentialEquations.\n\n\n\n\n\n","category":"method"},{"location":"dev-api.html#CTFlows.__saveat-Tuple{}","page":"Developers","title":"CTFlows.__saveat","text":"__saveat() -> Vector{Any}\n\n\nSee saveat from DifferentialEquations.\n\n\n\n\n\n","category":"method"},{"location":"dev-api.html#CTFlows.__tstops-Tuple{}","page":"Developers","title":"CTFlows.__tstops","text":"__tstops() -> Vector{Real}\n\n\nSee tstops from DifferentialEquations.\n\n\n\n\n\n","category":"method"},{"location":"dev-api.html#CTFlows.makeH-Tuple{CTBase.Dynamics, CTBase.ControlLaw, CTBase.Lagrange, Real, Real, CTBase.MixedConstraint, CTBase.Multiplier}","page":"Developers","title":"CTFlows.makeH","text":"makeH(\n    f::CTBase.Dynamics,\n    u::CTBase.ControlLaw,\n    f⁰::CTBase.Lagrange,\n    p⁰::Real,\n    s::Real,\n    g::CTBase.MixedConstraint,\n    μ::CTBase.Multiplier\n) -> CTFlows.var\"#H#43\"{CTBase.Dynamics{time_dependence, variable_dependence}, CTBase.ControlLaw{time_dependence1, variable_dependence1}, CTBase.Lagrange{time_dependence2, variable_dependence2}, var\"#s178\", var\"#s1781\", CTBase.MixedConstraint{time_dependence3, variable_dependence3}, CTBase.Multiplier{time_dependence4, variable_dependence4}} where {time_dependence, variable_dependence, time_dependence1, variable_dependence1, time_dependence2, variable_dependence2, var\"#s178\"<:Real, var\"#s1781\"<:Real, time_dependence3, variable_dependence3, time_dependence4, variable_dependence4}\n\n\nConstructs the Hamiltonian: \n\nH(t, x, p) = p ⋅ f(t, x, u(t, x, p)) + s p⁰ f⁰(t, x, u(t, x, p)) + μ(t, x, p) ⋅ g(t, x, u(t, x, p))\n\n\n\n\n\n","category":"method"},{"location":"dev-api.html#CTFlows.makeH-Tuple{CTBase.Dynamics, CTBase.ControlLaw, CTBase.Lagrange, Real, Real}","page":"Developers","title":"CTFlows.makeH","text":"makeH(\n    f::CTBase.Dynamics,\n    u::CTBase.ControlLaw,\n    f⁰::CTBase.Lagrange,\n    p⁰::Real,\n    s::Real\n) -> CTFlows.var\"#H#41\"{CTBase.Dynamics{time_dependence, variable_dependence}, CTBase.ControlLaw{time_dependence1, variable_dependence1}, CTBase.Lagrange{time_dependence2, variable_dependence2}, <:Real, <:Real} where {time_dependence, variable_dependence, time_dependence1, variable_dependence1, time_dependence2, variable_dependence2}\n\n\nConstructs the Hamiltonian: \n\nH(t, x, p) = p ⋅ f(t, x, u(t, x, p)) + s p⁰ f⁰(t, x, u(t, x, p))\n\n\n\n\n\n","category":"method"},{"location":"dev-api.html#CTFlows.makeH-Tuple{CTBase.Dynamics, CTBase.ControlLaw, CTBase.MixedConstraint, CTBase.Multiplier}","page":"Developers","title":"CTFlows.makeH","text":"makeH(\n    f::CTBase.Dynamics,\n    u::CTBase.ControlLaw,\n    g::CTBase.MixedConstraint,\n    μ::CTBase.Multiplier\n) -> CTFlows.var\"#H#42\"{CTBase.Dynamics{time_dependence, variable_dependence}, CTBase.ControlLaw{time_dependence1, variable_dependence1}, CTBase.MixedConstraint{time_dependence2, variable_dependence2}, CTBase.Multiplier{time_dependence3, variable_dependence3}} where {time_dependence, variable_dependence, time_dependence1, variable_dependence1, time_dependence2, variable_dependence2, time_dependence3, variable_dependence3}\n\n\nConstructs the Hamiltonian: \n\nH(t, x, p) = p ⋅ f(t, x, u(t, x, p)) + μ(t, x, p) ⋅ g(t, x, u(t, x, p))\n\n\n\n\n\n","category":"method"},{"location":"dev-api.html#CTFlows.makeH-Tuple{CTBase.Dynamics, CTBase.ControlLaw}","page":"Developers","title":"CTFlows.makeH","text":"makeH(\n    f::CTBase.Dynamics,\n    u::CTBase.ControlLaw\n) -> CTFlows.var\"#39#40\"{CTBase.Dynamics{time_dependence, variable_dependence}, CTBase.ControlLaw{time_dependence1, variable_dependence1}} where {time_dependence, variable_dependence, time_dependence1, variable_dependence1}\n\n\nConstructs the Hamiltonian: \n\nH(t, x, p) = p f(t, x, u(t, x, p))\n\n\n\n\n\n","category":"method"},{"location":"dev-api.html","page":"Developers","title":"Developers","text":"","category":"page"},{"location":"index.html#CTFlows.jl","page":"Introduction","title":"CTFlows.jl","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"CurrentModule =  CTFlows","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The CTFlows.jl package is part of the control-toolbox ecosystem.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"flowchart TD\nO(<a href='https://control-toolbox.org/docs/optimalcontrol/stable/'>OptimalControl</a>) --> B(<a href='https://control-toolbox.org/docs/ctbase/stable/'>CTBase</a>)\nO --> D(<a href='https://control-toolbox.org/docs/ctdirect/stable/'>CTDirect</a>)\nO --> F(<a href='https://control-toolbox.org/docs/ctflows/stable/'>CTFlows</a>)\nP(<a href='https://control-toolbox.org/docs/ctproblems/stable/'>CTProblems</a>) --> F\nP --> B\nF --> B\nD --> B\nstyle F fill:#FFF0F5","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"note: Install\nTo install a package from the control-toolbox ecosystem,  please visit the installation page.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"It aims to provide tools to solve mathematical flows of vector fields, and in particular Hamiltonian vector fields directly from the definition of the Hamiltonian, using automatic differentiation to construct the assiocated Hamiltonian vector field.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The flow is then computed thanks to OrdinaryDiffEq.jl package.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"","category":"page"}]
}
